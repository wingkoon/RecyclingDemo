{"ast":null,"code":"var _jsxFileName = \"/home/labber/lighthouse/recyclingDemo/frontend/src/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link, useNavigate } from 'react-router-dom'; // Assuming you have React Router\nimport axios from 'axios'; // Import Axios for HTTP requests\nimport { LoginContext } from './LoginContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoginSelected, setIsLoginSelected] = useState(true); // Flag for login/register selection\n  const [errorMessage, setErrorMessage] = useState(''); // Error message state\n  const backendUrl = 'http://localhost:8001'; // More descriptive variable name\n  const {\n    setIsLoggedIn,\n    setUserType,\n    setUserEmail,\n    setUserProfile\n  } = useContext(LoginContext);\n  const handleLogin = async () => {\n    if (!email || !password) {\n      setErrorMessage(''); // Clear any previous errors\n      setErrorMessage('Please enter your email and password.');\n      return; // Don't proceed if fields are empty\n    }\n    const url = `${backendUrl}/api/user/login`;\n    const method = 'POST';\n    try {\n      const response = await axios.post(url, {\n        email,\n        password\n      });\n\n      // Successful login\n      setUserType('user'); // Assuming user type is always 'user' here\n      setUserEmail(email);\n      setUserProfile(response.data.userProfile); // Update user profile if provided by the backend\n      setIsLoggedIn(true);\n      navigate('/user'); // Navigate to user profile after successful login\n    } catch (error) {\n      setErrorMessage('Invalid email or password.Please Input Again!');\n      console.log('errorMessage:', errorMessage);\n    }\n  };\n  const handleRegistration = async () => {\n    if (!email || !password) {\n      setErrorMessage(''); // Clear any previous errors\n      setErrorMessage('Please enter your email and password.');\n      return; // Don't proceed if fields are empty\n    }\n    const url = `${backendUrl}/api/user/register`;\n    const method = 'POST';\n    try {\n      const response = await axios.post(url, {\n        email,\n        password\n      });\n      if (response.data.success) {\n        setUserType('user'); // Assuming user type is always 'user' here\n        setUserEmail(email);\n        setIsLoggedIn(true);\n        navigate('/user/profile'); // Navigate to user profile after successful registration\n      } else {\n        setErrorMessage('Email exists. Please login or register with a different email.');\n        // Handle registration failure gracefully\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-register\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isLoginSelected ? 'Welcome! Please login' : 'New user? Please register'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => e.preventDefault(),\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: isLoginSelected ? handleLogin : handleRegistration,\n        children: isLoginSelected ? 'Login' : 'Register'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsLoginSelected(!isLoginSelected),\n      children: isLoginSelected ? 'New user? Please register' : 'Already have an account? Login'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"yk1Zf1LYmOqmo0s+HHy3vuNwkJc=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","useNavigate","axios","LoginContext","jsxDEV","_jsxDEV","Login","_s","navigate","email","setEmail","password","setPassword","isLoginSelected","setIsLoginSelected","errorMessage","setErrorMessage","backendUrl","setIsLoggedIn","setUserType","setUserEmail","setUserProfile","handleLogin","url","method","response","post","data","userProfile","error","console","log","handleRegistration","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","required","onClick","_c","$RefreshReg$"],"sources":["/home/labber/lighthouse/recyclingDemo/frontend/src/Login.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useNavigate } from 'react-router-dom'; // Assuming you have React Router\nimport axios from 'axios'; // Import Axios for HTTP requests\nimport { LoginContext } from './LoginContext';\n\nfunction Login() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoginSelected, setIsLoginSelected] = useState(true); // Flag for login/register selection\n  const [errorMessage, setErrorMessage] = useState(''); // Error message state\n  const backendUrl = 'http://localhost:8001'; // More descriptive variable name\n  const { setIsLoggedIn, setUserType, setUserEmail, setUserProfile } = useContext(LoginContext);\n\n  const handleLogin = async () => {\n    if (!email || !password) {\n      setErrorMessage(''); // Clear any previous errors\n      setErrorMessage('Please enter your email and password.');\n      return; // Don't proceed if fields are empty\n    }\n\n    const url = `${backendUrl}/api/user/login`;\n    const method = 'POST';\n\n    try {\n      const response = await axios.post(url, {\n        email,\n        password,\n      });\n\n      // Successful login\n      setUserType('user'); // Assuming user type is always 'user' here\n      setUserEmail(email);\n      setUserProfile(response.data.userProfile); // Update user profile if provided by the backend\n      setIsLoggedIn(true);\n\n      navigate('/user'); // Navigate to user profile after successful login\n\n    } catch (error) {\n      setErrorMessage('Invalid email or password.Please Input Again!');\n      console.log('errorMessage:', errorMessage); \n    }\n  };\n\n  const handleRegistration = async () => {\n    if (!email || !password) {\n      setErrorMessage(''); // Clear any previous errors\n      setErrorMessage('Please enter your email and password.');\n      return; // Don't proceed if fields are empty\n    }\n\n    const url = `${backendUrl}/api/user/register`;\n    const method = 'POST';\n\n    try {\n      const response = await axios.post(url, {\n        email,\n        password,\n      });\nif (response.data.success) {\n  setUserType('user'); // Assuming user type is always 'user' here\n      setUserEmail(email);\n      setIsLoggedIn(true);\n\n      navigate('/user/profile'); // Navigate to user profile after successful registration\n} else {\n        setErrorMessage('Email exists. Please login or register with a different email.');\n        // Handle registration failure gracefully\n      } \n    } catch (error) {\n      console.error('Registration error:', error);\n    \n    }\n  };\n\n  return (\n    <div className=\"login-register\">\n      <h2>{isLoginSelected ? 'Welcome! Please login' : 'New user? Please register'}</h2>\n      <form onSubmit={(e) => e.preventDefault()}> {/* Prevent default form submission */}\n        <label htmlFor=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n        <label htmlFor=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n        <button type=\"button\" onClick={isLoginSelected ? handleLogin : handleRegistration}>\n          {isLoginSelected ? 'Login' : 'Register'}\n        </button>\n      </form>\n      {errorMessage && <p className=\"error\">{errorMessage}</p>}\n      <button onClick={() => setIsLoginSelected(!isLoginSelected)}>\n        {isLoginSelected ? 'New user? Please register' : 'Already have an account? Login'}\n      </button>\n    </div>\n  );\n}\n\nexport default Login;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}