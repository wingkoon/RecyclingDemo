{"ast":null,"code":"var _jsxFileName = \"/home/labber/lighthouse/recyclingDemo/frontend/src/ProviderService.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AddServiceModal from './AddServiceModal'; // Import AddServiceModal component\nimport { idToTown } from './Convert'; // Replace with your path\nimport { LoginContext } from './LoginContext'; // Assuming LoginContext.js is in the same directory\nimport Navigation from './NavigationBar';\nimport axios from 'axios'; // Import Axios for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ServiceOfferPage() {\n  _s2();\n  var _s = $RefreshSig$();\n  const navigate = useNavigate();\n  const {\n    isLoggedIn,\n    userEmail,\n    userType,\n    userProfile\n  } = useContext(LoginContext);\n  const [services, setServices] = useState([]);\n  const [wasteTypes] = useState(['paper', 'steel', 'aluminum', 'laptop', 'computer', 'cell phone', 'screen', 'bed', 'table', 'chair']);\n  const [towns] = useState(['Surrey', 'Burnaby', 'Vancouver', 'Richmond']);\n  const [addedServices, setAddedServices] = useState([]); // Array to track added services (with location_id)\n  const [deletedServices, setDeletedServices] = useState([]); // Array to track deleted services (with location_id)\n  const backendUrl = 'http://localhost:8001';\n  const [addServiceModalOpen, setAddServiceModalOpen] = useState(false); // Corrected: Removed duplicate declaration\n  const [selectedWasteType, setSelectedWasteType] = useState(''); // State for selected waste type\n  const [selectedLocationId, setSelectedLocationId] = useState(''); // State for selected location ID\n\n  const handleOpenAddServiceModal = () => setAddServiceModalOpen(true);\n  const handleCloseAddServiceModal = () => setAddServiceModalOpen(false);\n  const handleWasteTypeChange = event => {\n    setSelectedWasteType(event.target.value);\n  };\n  const handleLocationChange = event => {\n    setSelectedLocationId(event.target.value);\n  };\n  const handleAddServiceSubmit = () => {\n    _s();\n    if (!selectedWasteType || !selectedLocationId) {\n      alert('Please select both waste type and location from the dropdowns.');\n      return;\n    }\n    const newService = {\n      waste_type: selectedWasteType,\n      location_id: selectedLocationId\n    };\n    useEffect(() => {\n      const fetchServices = async () => {\n        const id = userProfile.id;\n        if (isLoggedIn) {\n          try {\n            const url = `${backendUrl}/api/provider/service`;\n            const response = await axios.post(url, {\n              id\n            });\n            console.log(response);\n            const record = response.data;\n\n            // Check if response.data is an array before applying map\n            if (Array.isArray(record)) {\n              const servicesWithTownNames = record.map(service => ({\n                ...service,\n                town: idToTown(service.location_id) // Convert location_id to town name\n              }));\n              setServices(servicesWithTownNames);\n            } else {\n              // Handle non-array response (e.g., log a message or display an error)\n              console.log('Received unexpected response format:', response.data);\n            }\n          } catch (error) {\n            console.error('Error fetching services:', error);\n            // Handle errors appropriately (e.g., display an error message)\n          }\n        }\n      };\n      fetchServices();\n    }, [isLoggedIn]);\n    const handleDeleteService = service => {\n      if (window.confirm('Are you sure you want to delete this service option?')) {\n        setDeletedServices([...deletedServices, service]); // Add to deleted services\n        setServices(services.filter(item => item !== service)); // Remove from displayed list immediately\n      }\n    };\n    const handleAddServiceSubmit = newService => {\n      if (newService.waste_type) {\n        const isDuplicate = services.some(service => service.waste_type.toLowerCase() === newService.waste_type.toLowerCase());\n        if (isDuplicate) {\n          alert('This service option already exists.');\n        } else {\n          setAddedServices([...addedServices, newService]); // Add to added services\n          setServices([...services, {\n            ...newService,\n            town: idToTown(newService.location_id)\n          }]); // Add to displayed list with town name\n        }\n      } else {\n        alert('Please select the service information.');\n      }\n    };\n    const handleConfirmChanges = async () => {\n      if (addedServices.length === 0 && deletedServices.length === 0) {\n        alert('No changes to confirm.');\n        return;\n      }\n      const formattedAddedServices = addedServices.map(service => ({\n        wastes_type: service.waste_type,\n        location_id: service.location_id\n      }));\n      const formattedDeletedServices = deletedServices.map(service => ({\n        wastes_type: service.waste_type,\n        location_id: service.location_id\n      }));\n      const deleteurl = `${backendUrl}/api/provider/service/delete`;\n      const addurl = `${backendUrl}/api/provider/service/add`;\n      // Replace with your actual API calls for deletions and additions\n      const deletionResults = await axios.post(deleteurl, {\n        id: userProfile.id,\n        service: formattedDeletedServices\n      });\n      const additionResults = await axios.post(addurl, {\n        id: userProfile.id,\n        service: formattedAddedServices\n      });\n\n      // Handle successful or failed deletions and additions\n      if (deletionResults.every(result => result.ok) && additionResults.every(result => result.ok)) {\n        setAddedServices([]);\n        setDeletedServices([]);\n        // Update displayed services if needed (considering backend updates)\n      } else {\n        console.error('Error confirming changes:', deletionResults, additionResults);\n        // Handle errors appropriately (e.g., display an error message)\n      }\n    };\n    const handleOpenAddServiceModal = () => {\n      setAddServiceModalOpen(true);\n    };\n    const handleCloseAddServiceModal = () => {\n      setAddServiceModalOpen(false);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Service Offerings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: services.map(service => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [service.waste_type, \" - \", service.town, \" (\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteService(service),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), \")\"]\n        }, `${service.waste_type}-${service.town}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpenAddServiceModal,\n        children: \"Add Service\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }, this), addServiceModalOpen && /*#__PURE__*/_jsxDEV(AddServiceModal, {\n        wasteTypes: wasteTypes // Assuming you have a wasteTypes array\n        ,\n        towns: towns // Assuming you have a towns array\n        ,\n        onSubmit: handleAddServiceSubmit,\n        onClose: handleCloseAddServiceModal,\n        selectedWasteType: selectedWasteType // Pass the selected waste type as a prop\n        ,\n        onWasteTypeChange: handleWasteTypeChange // Pass the waste type change handler\n        ,\n        selectedLocationId: selectedLocationId // Pass the selected location ID as a prop\n        ,\n        onLocationChange: handleLocationChange // Pass the location change handler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleConfirmChanges,\n        children: \"Confirm Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"confirmation-message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this);\n  };\n  _s(handleAddServiceSubmit, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n}\n_s2(ServiceOfferPage, \"TkA3VznqlKj407NB6ilLawajhnA=\", false, function () {\n  return [useNavigate];\n});\n_c = ServiceOfferPage;\nexport default ServiceOfferPage;\nvar _c;\n$RefreshReg$(_c, \"ServiceOfferPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","AddServiceModal","idToTown","LoginContext","Navigation","axios","jsxDEV","_jsxDEV","ServiceOfferPage","_s2","_s","$RefreshSig$","navigate","isLoggedIn","userEmail","userType","userProfile","services","setServices","wasteTypes","towns","addedServices","setAddedServices","deletedServices","setDeletedServices","backendUrl","addServiceModalOpen","setAddServiceModalOpen","selectedWasteType","setSelectedWasteType","selectedLocationId","setSelectedLocationId","handleOpenAddServiceModal","handleCloseAddServiceModal","handleWasteTypeChange","event","target","value","handleLocationChange","handleAddServiceSubmit","alert","newService","waste_type","location_id","fetchServices","id","url","response","post","console","log","record","data","Array","isArray","servicesWithTownNames","map","service","town","error","handleDeleteService","window","confirm","filter","item","isDuplicate","some","toLowerCase","handleConfirmChanges","length","formattedAddedServices","wastes_type","formattedDeletedServices","deleteurl","addurl","deletionResults","additionResults","every","result","ok","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","onClose","onWasteTypeChange","onLocationChange","_c","$RefreshReg$"],"sources":["/home/labber/lighthouse/recyclingDemo/frontend/src/ProviderService.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport AddServiceModal from './AddServiceModal'; // Import AddServiceModal component\nimport { idToTown } from './Convert'; // Replace with your path\nimport { LoginContext } from './LoginContext'; // Assuming LoginContext.js is in the same directory\nimport Navigation from './NavigationBar';\nimport axios from 'axios'; // Import Axios for HTTP requests\n\nfunction ServiceOfferPage() {\n  const navigate = useNavigate();\n  const { isLoggedIn, userEmail, userType, userProfile } = useContext(LoginContext);\n  const [services, setServices] = useState([]);\n  const [wasteTypes] = useState(['paper', 'steel', 'aluminum', 'laptop', 'computer', 'cell phone', 'screen', 'bed', 'table', 'chair']);\n  const [towns] = useState(['Surrey', 'Burnaby', 'Vancouver', 'Richmond']);\n  const [addedServices, setAddedServices] = useState([]); // Array to track added services (with location_id)\n  const [deletedServices, setDeletedServices] = useState([]); // Array to track deleted services (with location_id)\n  const backendUrl = 'http://localhost:8001';\n  const [addServiceModalOpen, setAddServiceModalOpen] = useState(false); // Corrected: Removed duplicate declaration\n  const [selectedWasteType, setSelectedWasteType] = useState(''); // State for selected waste type\n  const [selectedLocationId, setSelectedLocationId] = useState(''); // State for selected location ID\n\n  const handleOpenAddServiceModal = () => setAddServiceModalOpen(true);\n  const handleCloseAddServiceModal = () => setAddServiceModalOpen(false);\n\n  const handleWasteTypeChange = (event) => {\n    setSelectedWasteType(event.target.value);\n  };\n\n  const handleLocationChange = (event) => {\n    setSelectedLocationId(event.target.value);\n  };\n\n  const handleAddServiceSubmit = () => {\n    if (!selectedWasteType || !selectedLocationId) {\n      alert('Please select both waste type and location from the dropdowns.');\n      return;\n    }\n\n    const newService = {\n      waste_type: selectedWasteType,\n      location_id: selectedLocationId,\n    };\n\n  useEffect(() => {\n    const fetchServices = async () => {\n      const id = userProfile.id;\n      if (isLoggedIn) {\n        try {\n          const url = `${backendUrl}/api/provider/service`;\n          const response = await axios.post(url, { id });\n  console.log(response);\n  const record = response.data;\n\n          // Check if response.data is an array before applying map\n          if (Array.isArray(record)) {\n            const servicesWithTownNames = record.map((service) => ({\n              ...service,\n              town: idToTown(service.location_id), // Convert location_id to town name\n            }));\n            setServices(servicesWithTownNames);\n          } else {\n            // Handle non-array response (e.g., log a message or display an error)\n            console.log('Received unexpected response format:', response.data);\n          }\n        } catch (error) {\n          console.error('Error fetching services:', error);\n          // Handle errors appropriately (e.g., display an error message)\n        }\n      }\n    };\n    fetchServices();\n  }, [isLoggedIn]);\n  \n  \n\n\n  const handleDeleteService = (service) => {\n    if (window.confirm('Are you sure you want to delete this service option?')) {\n      setDeletedServices([...deletedServices, service]); // Add to deleted services\n      setServices(services.filter((item) => item !== service)); // Remove from displayed list immediately\n    }\n  };\n\n  const handleAddServiceSubmit = (newService) => {\n    if (newService.waste_type) {\n      const isDuplicate = services.some(\n        (service) => service.waste_type.toLowerCase() === newService.waste_type.toLowerCase()\n      );\n      if (isDuplicate) {\n        alert('This service option already exists.');\n      } else {\n        setAddedServices([...addedServices, newService]); // Add to added services\n        setServices([...services, { ...newService, town: idToTown(newService.location_id) }]); // Add to displayed list with town name\n      }\n    } else {\n      alert('Please select the service information.');\n    }\n  };\n\n  const handleConfirmChanges = async () => {\n    if (addedServices.length === 0 && deletedServices.length === 0) {\n      alert('No changes to confirm.');\n      return;\n    }\n\n    const formattedAddedServices = addedServices.map((service) => ({\n      wastes_type: service.waste_type,\n      location_id: service.location_id,\n    }));\n    const formattedDeletedServices = deletedServices.map((service) => ({\n      wastes_type: service.waste_type,\n      location_id: service.location_id,\n    }));\n    const deleteurl = `${backendUrl}/api/provider/service/delete`;\n    const addurl = `${backendUrl}/api/provider/service/add`;\n    // Replace with your actual API calls for deletions and additions\n    const deletionResults = await axios.post(deleteurl, {id: userProfile.id, service: formattedDeletedServices});\n    const additionResults = await axios.post(addurl, {id: userProfile.id, service: formattedAddedServices});\n\n    // Handle successful or failed deletions and additions\n    if (deletionResults.every((result) => result.ok) && additionResults.every((result) => result.ok)) {\n      setAddedServices([]);\n      setDeletedServices([]);\n      // Update displayed services if needed (considering backend updates)\n    } else {\n      console.error('Error confirming changes:', deletionResults, additionResults);\n      // Handle errors appropriately (e.g., display an error message)\n    }\n  };\n\n  const handleOpenAddServiceModal = () => {\n    setAddServiceModalOpen(true);\n  };\n\n  const handleCloseAddServiceModal = () => {\n    setAddServiceModalOpen(false);\n  };\n\nreturn (\n    <div>\n      <h2>My Service Offerings</h2>\n\n      {/* Display existing services */}\n      <ul>\n        {services.map((service) => (\n          <li key={`${service.waste_type}-${service.town}`}>\n            {service.waste_type} - {service.town} (\n            <button onClick={() => handleDeleteService(service)}>Delete</button>\n            )\n          </li>\n        ))}\n      </ul>\n\n      <button onClick={handleOpenAddServiceModal}>Add Service</button>\n\n      {addServiceModalOpen && (\n        <AddServiceModal\n          wasteTypes={wasteTypes} // Assuming you have a wasteTypes array\n          towns={towns} // Assuming you have a towns array\n          onSubmit={handleAddServiceSubmit}\n          onClose={handleCloseAddServiceModal}\n          selectedWasteType={selectedWasteType} // Pass the selected waste type as a prop\n          onWasteTypeChange={handleWasteTypeChange} // Pass the waste type change handler\n          selectedLocationId={selectedLocationId} // Pass the selected location ID as a prop\n          onLocationChange={handleLocationChange} // Pass the location change handler\n        />\n      )}\n\n      <button onClick={handleConfirmChanges}>Confirm Changes</button>\n      {/* Placeholder for potential success or error message */}\n      <div id=\"confirmation-message\"></div>\n    </div>\n  );\n};\n}\n\nexport default ServiceOfferPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}