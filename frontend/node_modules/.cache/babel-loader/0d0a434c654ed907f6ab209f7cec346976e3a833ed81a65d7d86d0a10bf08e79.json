{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { LoginContext } from './LoginContext'; // Assuming LoginContext holds state\n\nfunction Logout() {\n  _s();\n  const {\n    setIsLoggedIn,\n    setUserEmail,\n    setUserType,\n    setUserProfile\n  } = useContext(LoginContext);\n  const navigate = useNavigate();\n  const handleLogout = async () => {\n    // Make it asynchronous if needed for API calls\n    try {\n      // Perform logout logic here:\n      // - Clear user data from local storage or cookies\n      // - Send an API request to the server to invalidate the session (optional)\n      setIsLoggedIn(false);\n      setUserEmail('');\n      setUserProfile('');\n      navigate('/'); // Navigate to the home page after successful logout\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Handle logout errors gracefully, e.g., display an error message\n    }\n  };\n  useEffect(() => {\n    handleLogout(); // Call handleLogout on component mount\n  }, []); // Empty dependency array ensures it runs only once\n\n  return null; // Return nothing to avoid rendering any UI\n}\n_s(Logout, \"fwrltnYaaek0XNL96JCX/4xkTlk=\", false, function () {\n  return [useNavigate];\n});\n_c = Logout;\nexport default Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["React","useContext","useNavigate","LoginContext","Logout","_s","setIsLoggedIn","setUserEmail","setUserType","setUserProfile","navigate","handleLogout","error","console","useEffect","_c","$RefreshReg$"],"sources":["/home/labber/lighthouse/recyclingDemo/frontend/src/Logout.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { LoginContext } from './LoginContext'; // Assuming LoginContext holds state\n\nfunction Logout() {\n  const { setIsLoggedIn, setUserEmail, setUserType, setUserProfile } = useContext(LoginContext);\n  const navigate = useNavigate();\n\n  const handleLogout = async () => { // Make it asynchronous if needed for API calls\n    try {\n      // Perform logout logic here:\n      // - Clear user data from local storage or cookies\n      // - Send an API request to the server to invalidate the session (optional)\n      setIsLoggedIn(false);\n      setUserEmail('');\n      setUserProfile('');\n      navigate('/'); // Navigate to the home page after successful logout\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Handle logout errors gracefully, e.g., display an error message\n    }\n  };\n\n  useEffect(() => {\n    handleLogout(); // Call handleLogout on component mount\n  }, []); // Empty dependency array ensures it runs only once\n\n  return null; // Return nothing to avoid rendering any UI\n}\n\nexport default Logout;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,gBAAgB,CAAC,CAAC;;AAE/C,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM;IAAEC,aAAa;IAAEC,YAAY;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGR,UAAU,CAACE,YAAY,CAAC;EAC7F,MAAMO,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9B,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAAE;IACjC,IAAI;MACF;MACA;MACA;MACAL,aAAa,CAAC,KAAK,CAAC;MACpBC,YAAY,CAAC,EAAE,CAAC;MAChBE,cAAc,CAAC,EAAE,CAAC;MAClBC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EAEDE,SAAS,CAAC,MAAM;IACdH,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAO,IAAI,CAAC,CAAC;AACf;AAACN,EAAA,CAxBQD,MAAM;EAAA,QAEIF,WAAW;AAAA;AAAAa,EAAA,GAFrBX,MAAM;AA0Bf,eAAeA,MAAM;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}